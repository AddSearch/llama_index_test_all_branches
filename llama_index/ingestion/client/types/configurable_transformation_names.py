# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class ConfigurableTransformationNames(str, enum.Enum):
    """
    An enumeration.
    """

    METADATA_EXTRACTOR = "METADATA_EXTRACTOR"
    KEYWORD_EXTRACTOR = "KEYWORD_EXTRACTOR"
    TITLE_EXTRACTOR = "TITLE_EXTRACTOR"
    ENTITY_EXTRACTOR = "ENTITY_EXTRACTOR"
    MARVIN_METADATA_EXTRACTOR = "MARVIN_METADATA_EXTRACTOR"
    SUMMARY_EXTRACTOR = "SUMMARY_EXTRACTOR"
    QUESTIONS_ANSWERED_EXTRACTOR = "QUESTIONS_ANSWERED_EXTRACTOR"
    SIMPLE_NODE_PARSER = "SIMPLE_NODE_PARSER"
    SENTENCE_WINDOW_NODE_PARSER = "SENTENCE_WINDOW_NODE_PARSER"
    HIERARCHICAL_NODE_PARSER = "HIERARCHICAL_NODE_PARSER"

    def visit(
        self,
        metadata_extractor: typing.Callable[[], T_Result],
        keyword_extractor: typing.Callable[[], T_Result],
        title_extractor: typing.Callable[[], T_Result],
        entity_extractor: typing.Callable[[], T_Result],
        marvin_metadata_extractor: typing.Callable[[], T_Result],
        summary_extractor: typing.Callable[[], T_Result],
        questions_answered_extractor: typing.Callable[[], T_Result],
        simple_node_parser: typing.Callable[[], T_Result],
        sentence_window_node_parser: typing.Callable[[], T_Result],
        hierarchical_node_parser: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is ConfigurableTransformationNames.METADATA_EXTRACTOR:
            return metadata_extractor()
        if self is ConfigurableTransformationNames.KEYWORD_EXTRACTOR:
            return keyword_extractor()
        if self is ConfigurableTransformationNames.TITLE_EXTRACTOR:
            return title_extractor()
        if self is ConfigurableTransformationNames.ENTITY_EXTRACTOR:
            return entity_extractor()
        if self is ConfigurableTransformationNames.MARVIN_METADATA_EXTRACTOR:
            return marvin_metadata_extractor()
        if self is ConfigurableTransformationNames.SUMMARY_EXTRACTOR:
            return summary_extractor()
        if self is ConfigurableTransformationNames.QUESTIONS_ANSWERED_EXTRACTOR:
            return questions_answered_extractor()
        if self is ConfigurableTransformationNames.SIMPLE_NODE_PARSER:
            return simple_node_parser()
        if self is ConfigurableTransformationNames.SENTENCE_WINDOW_NODE_PARSER:
            return sentence_window_node_parser()
        if self is ConfigurableTransformationNames.HIERARCHICAL_NODE_PARSER:
            return hierarchical_node_parser()
