# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .base_llm_predictor import BaseLlmPredictor
from .metadata_mode import MetadataMode


class KeywordExtractor(pydantic.BaseModel):
    """
    Keyword extractor. Node-level extractor. Extracts
    `excerpt_keywords` metadata field.
    Args:
        llm_predictor (Optional[BaseLLMPredictor]): LLM predictor
        keywords (int): number of keywords to extract
    """

    is_text_node_only: typing.Optional[bool]
    show_progress: typing.Optional[bool]
    metadata_mode: typing.Optional[MetadataMode]
    llm_predictor: BaseLlmPredictor = pydantic.Field(
        description="The LLMPredictor to use for generation."
    )
    keywords: typing.Optional[int] = pydantic.Field(
        description="The number of keywords to extract."
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
