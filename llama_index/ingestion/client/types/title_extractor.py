# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .base_llm_predictor import BaseLlmPredictor
from .metadata_mode import MetadataMode


class TitleExtractor(pydantic.BaseModel):
    """
    Title extractor. Useful for long documents. Extracts `document_title`
    metadata field.
    Args:
        llm_predictor (Optional[BaseLLMPredictor]): LLM predictor
        nodes (int): number of nodes from front to use for title extraction
        node_template (str): template for node-level title clues extraction
        combine_template (str): template for combining node-level clues into
            a document-level title
    """

    is_text_node_only: typing.Optional[bool]
    show_progress: typing.Optional[bool]
    metadata_mode: typing.Optional[MetadataMode]
    llm_predictor: BaseLlmPredictor = pydantic.Field(
        description="The LLMPredictor to use for generation."
    )
    nodes: typing.Optional[int] = pydantic.Field(
        description="The number of nodes to extract titles from."
    )
    node_template: typing.Optional[str] = pydantic.Field(
        description="The prompt template to extract titles with."
    )
    combine_template: typing.Optional[str] = pydantic.Field(
        description="The prompt template to merge titles with."
    )
    class_name: typing.Optional[str]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {
            "by_alias": True,
            "exclude_unset": True,
            **kwargs,
        }
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
