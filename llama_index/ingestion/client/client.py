# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .resources.data_sink.client import AsyncDataSinkClient, DataSinkClient
from .resources.data_source.client import AsyncDataSourceClient, DataSourceClient
from .resources.health.client import AsyncHealthClient, HealthClient
from .resources.project.client import AsyncProjectClient, ProjectClient
from .resources.transformation.client import (
    AsyncTransformationClient,
    TransformationClient,
)


class PlatformApi:
    def __init__(self, *, base_url: str, timeout: typing.Optional[float] = 60):
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url, httpx_client=httpx.Client(timeout=timeout)
        )
        self.health = HealthClient(client_wrapper=self._client_wrapper)
        self.data_sink = DataSinkClient(client_wrapper=self._client_wrapper)
        self.data_source = DataSourceClient(client_wrapper=self._client_wrapper)
        self.project = ProjectClient(client_wrapper=self._client_wrapper)
        self.transformation = TransformationClient(client_wrapper=self._client_wrapper)


class AsyncPlatformApiApi:
    def __init__(self, *, base_url: str, timeout: typing.Optional[float] = 60):
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url, httpx_client=httpx.AsyncClient(timeout=timeout)
        )
        self.health = AsyncHealthClient(client_wrapper=self._client_wrapper)
        self.data_sink = AsyncDataSinkClient(client_wrapper=self._client_wrapper)
        self.data_source = AsyncDataSourceClient(client_wrapper=self._client_wrapper)
        self.project = AsyncProjectClient(client_wrapper=self._client_wrapper)
        self.transformation = AsyncTransformationClient(
            client_wrapper=self._client_wrapper
        )
